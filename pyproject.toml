[project]
name = "metron-tagger"
version = "3.5.1"
description = "A program to write metadata from metron.cloud to a comic archive"
authors = [{ name = "Brian Pepple", email = "bpepple@metron.cloud" }]
requires-python = "~=3.10"
readme = "README.rst"
license = "GPL-3.0-or-later"
maintainers = [{ name = "Brian Pepple", email = "bpepple@metron.cloud" }]
keywords = ["comics", "comic", "metadata", "tagging", "tagger"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Utilities",
  "Topic :: Other/Nonlisted Topic",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX",
  "Operating System :: POSIX :: BSD",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
]
dependencies = [
  "mokkari>=3.10.1,<4",
  "questionary>=2.0.1,<3",
  "pyxdg>=0.28,<0.29",
  "imagehash>=4.3.1,<5",
  "pandas>=2.2.1,<3",
  "comicfn2dict>=0.2.4,<0.3",
  "tqdm>=4.66.4,<5",
  "darkseid>=5.1.2,<6",
]

[project.urls]
Homepage = "https://github.com/Metron-Project/metron-tagger"
"Bug Tracker" = "https://github.com/Metron-Project/metron-tagger/issues"

[project.scripts]
metron-tagger = "metrontagger.cli:main"

[dependency-groups]
dev = ["pre-commit>=4", "tox>=4.14.1,<5", "tox-uv>=1.25.0"]
test = ["coverage[toml]~=7.0", "pytest-cov>=4.1.0,<5", "pytest-mock>=3.6.1,<4"]
lint = [
  "codespell>=2.1.0,<3",
  "pyright>=1.1.232,<2",
  "radon[toml]>=6.0.1,<7",
  "ruff>=0.4.9,<0.5",
  "types-python-dateutil>=2.8.19,<3",
  "vulture~=2.3",
]

[tool.uv]
default-groups = ["dev", "test", "lint"]

[tool.hatch.build.targets.sdist]
include = ["metrontagger", "tests", "NEWS.md"]
exclude = ["*/**/*~"]

[tool.hatch.build.targets.wheel]
include = ["metrontagger"]
exclude = ["*/**/*~"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 95
default_section = "THIRDPARTY"
known_first_party = []
known_third_party = [
  "PIL",
  "comicfn2dict",
  "darkseid",
  "imagehash",
  "lxml",
  "mokkari",
  "pandas",
  "pydantic",
  "pytest",
  "questionary",
  "xdg",
]

[tool.codespell]
skip = './cache,./dist,./test-results,.git,.mypy_cache,.pytest_cache,.venv*,node_modules,package-lock.json,run.spec,.lock'
builtin = 'clear,rare,code'
check-hidden = true
# Remove 'coverd' when this issue is resolved
# https://github.com/codespell-project/codespell/issues/1212
ignore-words-list = 'thead,ro,jupyter,coverd,searched,ws'

[tool.ruff]
extend-exclude = ["typings"]
line-length = 95
show-fixes = true
target-version = "py310"

[tool.ruff.lint]
extend-ignore = [
  "S101",
  "C901",
  "D203",
  "D213",
  # Format ignores
  "W191",
  "E501",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
  "PT001",
]
extend-select = [
  "A",
  "ARG",
  "B",
  "B9",
  "C",
  "C4",
  "C90",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "I",
  "ICN",
  "INP",
  "ISC",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "N",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
  # "ANN", "ERA", "COM"
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"tests/test_*.py" = ["ERA001", "S101", "SLF001", "PT001"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.vulture]
exclude = [
  ".git/",
  ".mypy_cache/",
  ".pytest_cache/",
  "*.venv*",
  "*/__pycache__",
  "dist/",
  "node_modules/",
  "test_results/",
  "typings/",
]
min_confidence = 61
sort_by_size = true

[tool.coverage.report]
show_missing = true

[tool.coverage.html]
directory = "test-results/coverage"

[tool.coverage.run]
source = ["metrontagger"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".venv*/*",
  "*__pycache__*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
]

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".venv*",
  "cache",
  "dist",
  "package-lock.json",
  "test-results",
  "typings",
  "uv.lock",
]
useLibraryCodeForTypes = true
reportMissingImports = true
reportImportCycles = true
pythonVersion = "3.10"
pythonPlatform = "All"

[tool.pytest.ini_options]
addopts = """
    --junit-xml=test-results/pytest/results.xml
    -ra
    --strict-config
    --strict-markers
    --cov
    --cov-append
    --cov-report=html
    --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.venv*,__pycache__/*,cache/*,dist/*,node_modules/*,test-results/*,typings/*,.tox/*"

[tool.tox]
env_list = ["3.10", "3.11", "3.12", "3.13"]
min_version = "4.22"

[tool.tox.env_run_base]
commands = [["pytest"]]
dependency_groups = ["test"]
